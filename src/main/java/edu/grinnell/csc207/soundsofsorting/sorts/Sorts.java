package edu.grinnell.csc207.soundsofsorting.sorts;

import java.util.List;

import edu.grinnell.csc207.soundsofsorting.sortevents.SortEvent;

/**
 * A collection of sorting algorithms.
 */
public class Sorts {
    /**
     * Swaps indices <code>i</code> and <code>j</code> of array <code>arr</code>.
     * 
     * @param <T> the carrier type of the array
     * @param arr the array to swap
     * @param i   the first index to swap
     * @param j   the second index to swap
     */
    public static <T> void swap(T[] arr, int i, int j) {
        T tmp = arr[i];
        arr[i] = arr[j];
        arr[j] = tmp;
    }

    /**
     * Sorts the array according to the bubble sort algorithm:
     * 
     * <pre>
     * [ unprocessed | i largest elements in order ]
     * </pre>
     * 
     * @param <T> the carrier type of the array
     * @param arr the array to sort
     * @return the sort events generated by this sort
     */
    public static <T extends Comparable<? super T>> List<SortEvent<Integer>> bubbleSort(T[] arr) {
        for (int i = arr.length - 1; i > 0; i--) {
            for (int j = arr.length - 1; j > 0; j--) {
                if (arr[j].compareTo(arr[j - 1]) < 0) {
                    swap(arr, j - 1, j);
                }
            }
        }
        return null;
    }

    /**
     * Sorts the array according to the selection sort algorithm:
     * 
     * <pre>
     * [ i smallest elements in order | unprocessed ]
     * </pre>
     * 
     * @param <T> the carrier type of the array
     * @param arr the array to sort
     * @return the sort events generated by this sort
     */
    public static <T extends Comparable<? super T>> List<SortEvent<Integer>> selectionSort(T[] arr) {
        for (int i = 0; i < arr.length; i++) {
            T min = arr[i];
            int index = i;
            for (int j = i; j < arr.length; j++) {
                if (min.compareTo(arr[j]) > 0) {
                    min = arr[j];
                    index = j;
                }
            }
            swap(arr, i, index);
        }
        return null;
    }

    /**
     * Sorts the array according to the insertion sort algorithm:
     * 
     * <pre>
     * [ i elements in order | unprocessed ]
     * </pre>
     * 
     * @param <T> the carrier type of the array
     * @param arr the array to sort
     * @return the sort events generated by this sort
     */
    public static <T extends Comparable<? super T>> List<SortEvent<Integer>> insertionSort(T[] arr) {
        for (int i = 0; i < arr.length - 1; i++) {
            int j = i + 1;
            while (j > 0 && arr[j].compareTo(arr[j - 1]) < 0) {
                swap(arr, j, j - 1);
                j--;
            }
        }
        return null;
    }

    /**
     * Sorts the array according to the merge sort algorithm.
     * 
     * @param <T> the carrier type of the array
     * @param arr the array to sort
     * @return the sort events generated by this sort
     */
    public static <T extends Comparable<? super T>> List<SortEvent<Integer>> mergeSort(T[] arr) {
        int size = arr.length;
        T[] replace = arr;

        int midpoint = size / 2;
        // mergeSortH(T[] arr, 0, midpoint);
        // mergeSortH(T[] arr, midpoint, size);
        return null;
    }

    private static <T extends Comparable<? super T>> void mergeSortH(T[] arr, int start, int end) {

    }

    /**
     * Sorts the array according to the quick sort algorithm.
     * 
     * @param <T> the carrier type of the array
     * @param arr the array to sort
     * @return the sort events generated by this sort
     */
    public static <T extends Comparable<? super T>> List<SortEvent<Integer>> quickSort(T[] arr) {
        quickSortH(arr, 0, arr.length - 1);
        return null;
    }

    private static <T extends Comparable<? super T>> void quickSortH(T[] arr, int lo, int hi) {
        if (lo < hi && lo >= 0 && hi >= 0) {
            int referencePoint = splitValue(arr, lo, hi);
            quickSortH(arr, lo, referencePoint);
            quickSortH(arr, referencePoint + 1, hi);
        }
    }

    private static <T extends Comparable<? super T>> int splitValue(T[] arr, int lo, int hi) {
        T midValue = arr[lo];
        int i = lo - 1;
        int j = hi + 1;

        while (true) {
            do {
                i++;
            } while (arr[i].compareTo(midValue) < 0 && i <= hi);

            do {
                j--;
            } while (arr[j].compareTo(midValue) > 0 && j >= lo);

            if (i >= j) {
                return j;
            }

            swap(arr, i, j);
        }
    }

    public static <T extends Comparable<? super T>> List<SortEvent<Integer>> cocktailShakerSort(T[] arr) {
        boolean swapped = true;
        int startIndex = 0;
        int endIndex = arr.length - 1;

        while (swapped) {
            swapped = false;
            for (int i = startIndex; i < endIndex; i++) {
                if (arr[i].compareTo(arr[i + 1]) > 0) {
                    swapped = true;
                    swap(arr, i, i + 1);
                }
            }
            if (!swapped) {
                break;
            }

        swapped = false;
        endIndex--;

        for (int j = endIndex; j > startIndex; j--) {
            if (arr[j].compareTo(arr[j - 1]) < 0) {
                swap(arr, j, j - 1);
                swapped = true;
            }
        }
        startIndex++;
    }
        return null;
    }
}
